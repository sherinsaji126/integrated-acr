pipeline {
    agent any

    environment {
        AZURE_CREDENTIALS_ID = 'azure-aks-service-principal' // Jenkins credentials ID (Service Principal)
        RESOURCE_GROUP = 'mysherin-newrg' 
        ACR_NAME = 'myacrregistry123'
        ACR_LOGIN_SERVER = "${ACR_NAME}.azurecr.io"
        IMAGE_NAME = 'myapi'
        AKS_CLUSTER = 'myakscluster'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sherinsaji126/integrated-acr.git'
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: AZURE_CREDENTIALS_ID)]) {
                    bat 'az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%'
                    bat 'terraform -version'
                    bat 'cd terraform44 && terraform init'
                    bat 'cd terraform44 && terraform plan'
                    bat 'cd terraform44 && terraform apply -auto-approve'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t %ACR_LOGIN_SERVER%/%IMAGE_NAME%:latest .'
            }
        }

        stage('Push Docker Image to ACR') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: AZURE_CREDENTIALS_ID)]) {
                    bat 'az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%'
                    bat 'az acr login --name %ACR_NAME%'
                    bat 'docker push %ACR_LOGIN_SERVER%/%IMAGE_NAME%:latest'
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: AZURE_CREDENTIALS_ID)]) {
                    bat 'az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%'
                    bat 'az aks get-credentials --resource-group %RESOURCE_GROUP% --name %AKS_CLUSTER%'
                    bat 'kubectl apply -f k8s\\deployment.yaml'
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment to AKS Successful!'
        }
        failure {
            echo 'Deployment Failed!'
        }
    }
}
